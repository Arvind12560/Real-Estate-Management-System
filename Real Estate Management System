import java.util.*;

public class RealEstateManager {

    static class Property {
        private String id;
        private String title;
        private String description;
        private String address;
        private double price;
        private String type;

        public Property(String id, String title, String description, String address, double price, String type) {
            this.id = id;
            this.title = title;
            this.description = description;
            this.address = address;
            this.price = price;
            this.type = type;
        }

        public String getId() {
            return id;
        }

        public String getTitle() {
            return title;
        }

        public String getDescription() {
            return description;
        }

        public String getAddress() {
            return address;
        }

        public double getPrice() {
            return price;
        }

        public String getType() {
            return type;
        }

        @Override
        public String toString() {
            return "Property ID: " + id + "\n" +
                    "Title: " + title + "\n" +
                    "Description: " + description + "\n" +
                    "Address: " + address + "\n" +
                    "Price: $" + price + "\n" +
                    "Type: " + type + "\n";
        }
    }

    private Map<String, Property> properties;

    public RealEstateManager() {
        properties = new HashMap<>();
    }

    public void addProperty(String id, String title, String description, String address, double price, String type) {
        Property property = new Property(id, title, description, address, price, type);
        properties.put(id, property);
    }

    public void removeProperty(String id) {
        if (properties.containsKey(id)) {
            properties.remove(id);
            System.out.println("Property with ID " + id + " has been removed.");
        } else {
            System.out.println("Property with ID " + id + " not found.");
        }
    }

    public void updateProperty(String id, String title, String description, String address, double price, String type) {
        Property property = properties.get(id);
        if (property != null) {
            property = new Property(id, title, description, address, price, type);
            properties.put(id, property);
            System.out.println("Property with ID " + id + " has been updated.");
        } else {
            System.out.println("Property with ID " + id + " not found.");
        }
    }

    public Property getPropertyById(String id) {
        return properties.get(id);
    }

    public List<Property> searchByType(String type) {
        List<Property> result = new ArrayList<>();
        for (Property property : properties.values()) {
            if (property.getType().equalsIgnoreCase(type)) {
                result.add(property);
            }
        }
        return result;
    }

    public List<Property> searchByPriceRange(double minPrice, double maxPrice) {
        List<Property> result = new ArrayList<>();
        for (Property property : properties.values()) {
            if (property.getPrice() >= minPrice && property.getPrice() <= maxPrice) {
                result.add(property);
            }
        }
        return result;
    }

    public void displayProperties(List<Property> propertyList) {
        if (propertyList.isEmpty()) {
            System.out.println("No properties found.");
        } else {
            for (Property property : propertyList) {
                System.out.println(property);
            }
        }
    }

    public void displayAllProperties() {
        if (properties.isEmpty()) {
            System.out.println("No properties available.");
        } else {
            for (Property property : properties.values()) {
                System.out.println(property);
            }
        }
    }

    public void showPropertyDetails(String id) {
        Property property = getPropertyById(id);
        if (property != null) {
            System.out.println(property);
        } else {
            System.out.println("Property with ID " + id + " not found.");
        }
    }

    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        RealEstateManager manager = new RealEstateManager();

        while (true) {
            System.out.println("Real Estate Management System");
            System.out.println("1. Add Property");
            System.out.println("2. Remove Property");
            System.out.println("3. Update Property");
            System.out.println("4. Display All Properties");
            System.out.println("5. Search Properties by Type");
            System.out.println("6. Search Properties by Price Range");
            System.out.println("7. View Property Details");
            System.out.println("8. Exit");
            System.out.print("Choose an option: ");
            int choice = scanner.nextInt();
            scanner.nextLine(); // Consume newline left by nextInt()

            switch (choice) {
                case 1:
                    System.out.print("Enter Property ID: ");
                    String addId = scanner.nextLine();
                    System.out.print("Enter Property Title: ");
                    String addTitle = scanner.nextLine();
                    System.out.print("Enter Property Description: ");
                    String addDescription = scanner.nextLine();
                    System.out.print("Enter Property Address: ");
                    String addAddress = scanner.nextLine();
                    System.out.print("Enter Property Price: ");
                    double addPrice = scanner.nextDouble();
                    scanner.nextLine(); // Consume newline
                    System.out.print("Enter Property Type (e.g., House, Apartment, Commercial): ");
                    String addType = scanner.nextLine();
                    manager.addProperty(addId, addTitle, addDescription, addAddress, addPrice, addType);
                    break;

                case 2:
                    System.out.print("Enter Property ID to Remove: ");
                    String removeId = scanner.nextLine();
                    manager.removeProperty(removeId);
                    break;

                case 3:
                    System.out.print("Enter Property ID to Update: ");
                    String updateId = scanner.nextLine();
                    System.out.print("Enter New Title: ");
                    String updateTitle = scanner.nextLine();
                    System.out.print("Enter New Description: ");
                    String updateDescription = scanner.nextLine();
                    System.out.print("Enter New Address: ");
                    String updateAddress = scanner.nextLine();
                    System.out.print("Enter New Price: ");
                    double updatePrice = scanner.nextDouble();
                    scanner.nextLine(); // Consume newline
                    System.out.print("Enter New Type: ");
                    String updateType = scanner.nextLine();
                    manager.updateProperty(updateId, updateTitle, updateDescription, updateAddress, updatePrice, updateType);
                    break;

                case 4:
                    manager.displayAllProperties();
                    break;

                case 5:
                    System.out.print("Enter Property Type to Search (e.g., House, Apartment): ");
                    String searchType = scanner.nextLine();
                    List<Property> typeResult = manager.searchByType(searchType);
                    manager.displayProperties(typeResult);
                    break;

                case 6:
                    System.out.print("Enter Minimum Price: ");
                    double minPrice = scanner.nextDouble();
                    System.out.print("Enter Maximum Price: ");
                    double maxPrice = scanner.nextDouble();
                    scanner.nextLine(); // Consume newline
                    List<Property> priceResult = manager.searchByPriceRange(minPrice, maxPrice);
                    manager.displayProperties(priceResult);
                    break;

                case 7:
                    System.out.print("Enter Property ID to View Details: ");
                    String viewId = scanner.nextLine();
                    manager.showPropertyDetails(viewId);
                    break;

                case 8:
                    System.out.println("Exiting...");
                    scanner.close();
                    return;

                default:
                    System.out.println("Invalid option. Please try again.");
            }
        }
    }
}
